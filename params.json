{"name":"Javacliparser","tagline":"JAVA Command Line Interface Parser able to use subcommands (more than one level depth).","body":"Java Command Line Interface Parser is a library to parse command line options that is able to use nested options.\r\n\r\nIt allows to enter options with suboptions that define a command line tree, for example:\r\n\r\n`` DoTask -s 5 -l (Task1 -s 3 -l (Task2 -s 1)) ``\r\n\r\nThe code to implement this, is the following:\r\n\r\n```java\r\npublic class DoTask implements Configurable {\r\n   public IntOption sizeOption = new IntOption(\"size\", 's',\r\n            \"Size\", 10, 1, Integer.MAX_VALUE);\r\n\r\n   public ClassOption taskClassOption = new ClassOption(\"taskClass\", 'l',\r\n            \"Task to execute.\", Task1.class, \"Task1 -s 4\");\r\n      \r\n   public void init() {\r\n        Task1 task = this.taskClassOption.getValue();\r\n        task.init()\r\n   }\r\n    public static void main(String[] args) throws Exception {\r\n        DoTask main = ClassOption.createObject(args, DoTask.class);\r\n        main.init();\r\n    }   \r\n}\r\n\r\npublic class Task1 implements Configurable {\r\n   public IntOption sizeOption = new IntOption(\"size\", 's',\r\n            \"Size\", 10, 1, Integer.MAX_VALUE);\r\n    \r\n    public ClassOption taskClassOption = new ClassOption(\"taskClass\", 'l',\r\n            \"Task to execute.\", Task2.class, \"Task2 -s 100\");\r\n\r\n    public void init() {\r\n        Task2 task = this.taskClassOption.getValue();\r\n        task.init();\r\n    }\r\n}\r\n\r\npublic class Task2 implements Configurable {\r\n    public IntOption sizeOption = new IntOption(\"size\", 's',\r\n            \"Size\", 10, 1, Integer.MAX_VALUE);\r\n\r\n    public void init() {\r\n    //...\r\n    }\r\n}\r\n\r\n```\r\n\r\nUsing the library is as easy as this:\r\n\r\n   1. Create a class that implements Configurable\r\n   2. Add option objects as fields inside the class\r\n   3. To retrieve the value of the options use the option method ``getValue()``\r\n   4. To create a new object use ``ClassOption.createObject()``\r\n\r\nThe following types of options are supported:\r\n\r\n   * Integer: ``IntOption (name, char, purpose, default Value, min Value, max Value)``\r\n   * Float: ``FloatOption (name, char, purpose, default Value, min Value, max Value)``\r\n   * Flag: ``FlagOption (name, char, purpose)``\r\n   * File: ``FileOption (name, char, purpose, default File name, default File extension, Output)`` \r\n   * String: ``StringOption (name, char, purpose, default Value)``\r\n   * Multichoice: ``MultichoiceOption (name, char, purpose, option labels, option descriptions, default option index)``\r\n   * Class: ``ClassOption (name, char, purpose, required type, default CLI string, null String)`` \r\n   * List: ``ListOption (name, char, purpose, expected option type, default list, separator char)`` \r\n \r\nExample of usage:\r\n\r\n```java\r\npublic class Task implements Configurable {\r\n    public IntOption gracePeriodOption = new IntOption(\r\n            \"gracePeriod\",\r\n            'g',\r\n            \"The number of instances a leaf should observe between split attempts.\",\r\n            200, 0, Integer.MAX_VALUE);\r\n\r\n    public ClassOption splitCriterionOption = new ClassOption(\"splitCriterion\",\r\n            's', \"Split criterion to use.\", SplitCriterion.class,\r\n            \"InfoGainSplitCriterion\");\r\n\r\n    public FloatOption splitConfidenceOption = new FloatOption(\r\n            \"splitConfidence\",\r\n            'c',\r\n            \"The allowable error in split decision, values closer to 0 will take longer to decide.\",\r\n            0.0000001, 0.0, 1.0);\r\n\r\n    public FlagOption binarySplitsOption = new FlagOption(\"binarySplits\", 'b',\r\n            \"Only allow binary splits.\");\r\n            \r\n    public FileOption dumpFileOption = new FileOption(\"dumpFile\", 'd',\r\n            \"File to append intermediate csv results to.\", null, \"csv\", true);\r\n            \r\n    public StringOption xTitleOption = new StringOption(\"xTitle\", 'm',\r\n            \"Title of the plots' x-axis.\", \"Processed instances\");  \r\n\r\n    ....\r\n}\r\n```\r\n\r\nThis library is used in the SAMOA and MOA projects for mining big data streams.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}